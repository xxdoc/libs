/***************************************************************************
 *
 * Project: libcurl.vb
 *
 * Copyright (c) 2005 Jeff Phillips (jeff@jeffp.net)
 *
 * This software is licensed as described in the file COPYING, which you
 * should have received as part of this distribution.
 *
 * You may opt to use, copy, modify, merge, publish, distribute and/or sell
 * copies of this Software, and permit persons to whom the Software is
 * furnished to do so, under the terms of the COPYING file.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
 * ANY KIND, either express or implied.
 *
 * $Id: vblibcurl.odl,v 1.2 2005/06/25 21:29:55 jeffreyphillips Exp $
 **************************************************************************/

[
  uuid(53546583-3552-4563-BFE3-920E8BD3EC51),
  version(1.1),
  helpstring("libcurl.vb type library 1.1 by Jeff Phillips."),
]
library vblibcurl
{
    typedef [v1_enum] enum curlioerr
    {
        CURLIOE_OK          = 0,
        CURLIOE_UNKNOWNCMD  = 1,
        CURLIOE_FAILRESTART = 2,
        CURLIOE_LAST        = 3
    } curlioerr;

    typedef [v1_enum] enum curliocmd
    {
        CURLIOCMD_NOP           = 0,
        CURLIOCMD_RESTARTREAD   = 1,
        CURLIOCMD_LAST          = 2
    } curliocmd;

    typedef [v1_enum] enum curl_infotype
    {
        CURLINFO_TEXT         = 0,
        CURLINFO_HEADER_IN    = 1,
        CURLINFO_HEADER_OUT   = 2,
        CURLINFO_DATA_IN      = 3,
        CURLINFO_DATA_OUT     = 4,
        CURLINFO_SSL_DATA_IN  = 5,
        CURLINFO_SSL_DATA_OUT = 6,
        CURLINFO_END          = 7
    } curl_infotype;

    typedef [v1_enum] enum CURLcode {
        CURLE_OK                          = 0,
        CURLE_ABORTED_BY_CALLBACK         = 42,
        CURLE_BAD_CALLING_ORDER           = 44,
        CURLE_BAD_CONTENT_ENCODING        = 61,
        CURLE_BAD_DOWNLOAD_RESUME         = 36,
        CURLE_BAD_FUNCTION_ARGUMENT       = 43,
        CURLE_BAD_PASSWORD_ENTERED        = 46,
        CURLE_COULDNT_CONNECT             = 7,
        CURLE_COULDNT_RESOLVE_HOST        = 6,
        CURLE_COULDNT_RESOLVE_PROXY       = 5,
        CURLE_FAILED_INIT                 = 2,
        CURLE_FILESIZE_EXCEEDED           = 63,
        CURLE_FILE_COULDNT_READ_FILE      = 37,
        CURLE_FTP_ACCESS_DENIED           = 9,
        CURLE_FTP_CANT_GET_HOST           = 15,
        CURLE_FTP_CANT_RECONNECT          = 16,
        CURLE_FTP_COULDNT_GET_SIZE        = 32,
        CURLE_FTP_COULDNT_RETR_FILE       = 19,
        CURLE_FTP_COULDNT_SET_ASCII       = 29,
        CURLE_FTP_COULDNT_SET_BINARY      = 17,
        CURLE_FTP_COULDNT_STOR_FILE       = 25,
        CURLE_FTP_COULDNT_USE_REST        = 31,
        CURLE_FTP_PORT_FAILED             = 30,
        CURLE_FTP_QUOTE_ERROR             = 21,
        CURLE_FTP_SSL_FAILED              = 64,
        CURLE_FTP_USER_PASSWORD_INCORRECT = 10,
        CURLE_FTP_WEIRD_227_FORMAT        = 14,
        CURLE_FTP_WEIRD_PASS_REPLY        = 11,
        CURLE_FTP_WEIRD_PASV_REPLY        = 13,
        CURLE_FTP_WEIRD_SERVER_REPLY      = 8,
        CURLE_FTP_WEIRD_USER_REPLY        = 12,
        CURLE_FTP_WRITE_ERROR             = 20,
        CURLE_FUNCTION_NOT_FOUND          = 41,
        CURLE_GOT_NOTHING                 = 52,
        CURLE_HTTP_POST_ERROR             = 34,
        CURLE_HTTP_RANGE_ERROR            = 33,
        CURLE_HTTP_RETURNED_ERROR         = 22,
        CURLE_INTERFACE_FAILED            = 45,
        CURLE_LAST                        = 67,
        CURLE_LDAP_CANNOT_BIND            = 38,
        CURLE_LDAP_INVALID_URL            = 62,
        CURLE_LDAP_SEARCH_FAILED          = 39,
        CURLE_LIBRARY_NOT_FOUND           = 40,
        CURLE_MALFORMAT_USER              = 24,
        CURLE_OBSOLETE                    = 50,
        CURLE_OPERATION_TIMEOUTED         = 28,
        CURLE_OUT_OF_MEMORY               = 27,
        CURLE_PARTIAL_FILE                = 18,
        CURLE_READ_ERROR                  = 26,
        CURLE_RECV_ERROR                  = 56,
        CURLE_SEND_ERROR                  = 55,
        CURL_SEND_FAIL_REWIND             = 65,
        CURLE_SHARE_IN_USE                = 57,
        CURLE_SSL_CACERT                  = 60,
        CURLE_SSL_CERTPROBLEM             = 58,
        CURLE_SSL_CIPHER                  = 59,
        CURLE_SSL_CONNECT_ERROR           = 35,
        CURLE_SSL_ENGINE_INITFAILED       = 66,
        CURLE_SSL_ENGINE_NOTFOUND         = 53,
        CURLE_SSL_ENGINE_SETFAILED        = 54,
        CURLE_SSL_PEER_CERTIFICATE        = 51,
        CURLE_TELNET_OPTION_SYNTAX        = 49,
        CURLE_TOO_MANY_REDIRECTS          = 47,
        CURLE_UNKNOWN_TELNET_OPTION       = 48,
        CURLE_UNSUPPORTED_PROTOCOL        = 1,
        CURLE_URL_MALFORMAT               = 3,
        CURLE_URL_MALFORMAT_USER          = 4,
        CURLE_WRITE_ERROR                 = 23,
    } CURLcode;

    typedef [v1_enum] enum curl_proxytype
    {
        CURLPROXY_HTTP   = 0,
        CURLPROXY_SOCKS4 = 4,
        CURLPROXY_SOCKS5 = 5
    } curl_proxytype;

    typedef [v1_enum] enum curl_httpauth
    {
        CURLAUTH_NONE           = 0,
        CURLAUTH_BASIC          = 1,
        CURLAUTH_DIGEST         = 2,
        CURLAUTH_GSSNEGOTIATE   = 4,
        CURLAUTH_NTLM           = 8,
        CURLAUTH_ANY            = 15,   // ~0
        CURLAUTH_ANYSAFE        = 14    // ~CURLAUTH_BASIC
    } curl_httpauth;

    typedef [v1_enum] enum curl_ftpssl
    {
        CURLFTPSSL_NONE     = 0,
        CURLFTPSSL_TRY      = 1,
        CURLFTPSSL_CONTROL  = 2,
        CURLFTPSSL_ALL      = 3,
        CURLFTPSSL_LAST     = 4
    } curl_ftpssl;

    typedef [v1_enum] enum curl_ftpauth
    {
        CURLFTPAUTH_DEFAULT     = 0,
        CURLFTPAUTH_SSL         = 1,
        CURLFTPAUTH_TLS         = 2,
        CURLFTPAUTH_LAST        = 3
    } curl_ftpauth;

    typedef [v1_enum] enum CURLoption {
        CURLOPT_AUTOREFERER             = 58,
        CURLOPT_BUFFERSIZE              = 98,
        CURLOPT_CAINFO                  = 10065,
        CURLOPT_CAPATH                  = 10097,
        CURLOPT_CLOSEPOLICY             = 72,
        CURLOPT_CONNECTTIMEOUT          = 78,
        CURLOPT_COOKIE                  = 10022,
        CURLOPT_COOKIEFILE              = 10031,
        CURLOPT_COOKIEJAR               = 10082,
        CURLOPT_COOKIESESSION           = 96,
        CURLOPT_CRLF                    = 27,
        CURLOPT_CUSTOMREQUEST           = 10036,
        CURLOPT_DEBUGDATA               = 10095,
        CURLOPT_DEBUGFUNCTION           = 20094,
        CURLOPT_DNS_CACHE_TIMEOUT       = 92,
        CURLOPT_DNS_USE_GLOBAL_CACHE    = 91,
        CURLOPT_EDGSOCKET               = 10077,
        CURLOPT_ENCODING                = 10102,
        CURLOPT_ERRORBUFFER             = 10010,
        CURLOPT_FAILONERROR             = 45,
        CURLOPT_FILETIME                = 69,
        CURLOPT_FOLLOWLOCATION          = 52,
        CURLOPT_FORBID_REUSE            = 75,
        CURLOPT_FRESH_CONNECT           = 74,
        CURLOPT_FTPACCOUNT              = 10134,
        CURLOPT_FTPAPPEND               = 50,
        CURLOPT_FTPLISTONLY             = 48,
        CURLOPT_FTPPORT                 = 10017,
        CURLOPT_FTPSSLAUTH              = 129,
        CURLOPT_FTP_CREATE_MISSING_DIRS = 110,
        CURLOPT_FTP_RESPONSE_TIMEOUT    = 112,
        CURLOPT_FTP_SSL                 = 119,
        CURLOPT_FTP_USE_EPRT            = 106,
        CURLOPT_FTP_USE_EPSV            = 85,
        CURLOPT_HEADER                  = 42,
        CURLOPT_HEADERDATA              = 10029,
        CURLOPT_HEADERFUNCTION          = 20079,
        CURLOPT_HTTP200ALIASES          = 10104,
        CURLOPT_HTTPAUTH                = 107,
        CURLOPT_HTTPGET                 = 80,
        CURLOPT_HTTPHEADER              = 10023,
        CURLOPT_HTTPPOST                = 10024,
        CURLOPT_HTTPPROXYTUNNEL         = 61,
        CURLOPT_HTTP_VERSION            = 84,
        CURLOPT_IOCTLFUNCTION           = 20130,
        CURLOPT_IOCTLDATA               = 10131,
        CURLOPT_INFILESIZE              = 14,
        CURLOPT_INFILESIZE_LARGE        = 30115,
        CURLOPT_INTERFACE               = 10062,
        CURLOPT_IPRESOLVE               = 113,
        CURLOPT_KRB4LEVEL               = 10063,
        CURLOPT_LASTENTRY               = 135,
        CURLOPT_LOW_SPEED_LIMIT         = 19,
        CURLOPT_LOW_SPEED_TIME          = 20,
        CURLOPT_MAXCONNECTS             = 71,
        CURLOPT_MAXFILESIZE             = 114,
        CURLOPT_MAXFILESIZE_LARGE       = 30117,
        CURLOPT_MAXREDIRS               = 68,
        CURLOPT_NETRC                   = 51,
        CURLOPT_NETRC_FILE              = 10118,
        CURLOPT_NOBODY                  = 44,
        CURLOPT_NOPROGRESS              = 43,
        CURLOPT_NOSIGNAL                = 99,
        CURLOPT_PASV_HOST               = 126,
        CURLOPT_PORT                    = 3,
        CURLOPT_POST                    = 47,
        CURLOPT_POSTFIELDS              = 10015,
        CURLOPT_POSTFIELDSIZE           = 60,
        CURLOPT_POSTFIELDSIZE_LARGE     = 30120,
        CURLOPT_POSTQUOTE               = 10039,
        CURLOPT_PREQUOTE                = 10093,
        CURLOPT_PRIVATE                 = 10103,
        CURLOPT_PROGRESSDATA            = 10057,
        CURLOPT_PROGRESSFUNCTION        = 20056,
        CURLOPT_PROXY                   = 10004,
        CURLOPT_PROXYAUTH               = 111,
        CURLOPT_PROXYPORT               = 59,
        CURLOPT_PROXYTYPE               = 101,
        CURLOPT_PROXYUSERPWD            = 10006,
        CURLOPT_PUT                     = 54,
        CURLOPT_QUOTE                   = 10028,
        CURLOPT_RANDOM_FILE             = 10076,
        CURLOPT_RANGE                   = 10007,
        CURLOPT_READDATA                = 10009,
        CURLOPT_READFUNCTION            = 20012,
        CURLOPT_REFERER                 = 10016,
        CURLOPT_RESUME_FROM             = 21,
        CURLOPT_RESUME_FROM_LARGE       = 30116,
        CURLOPT_SHARE                   = 10100,
        CURLOPT_SOURCE_HOST             = 10122,
        CURLOPT_SOURCE_PATH             = 10124,
        CURLOPT_SOURCE_PORT             = 125,
        CURLOPT_SOURCE_POSTQUOTE        = 10128,
        CURLOPT_SOURCE_PREQUOTE         = 10127,
        CURLOPT_SOURCE_QUOTE            = 10133,
        CURLOPT_SOURCE_URL              = 10132,
        CURLOPT_SOURCE_USERPWD          = 10123,
        CURLOPT_SSLCERT                 = 10025,
        CURLOPT_SSLCERTPASSWD           = 10026,
        CURLOPT_SSLCERTTYPE             = 10086,
        CURLOPT_SSLENGINE               = 10089,
        CURLOPT_SSLENGINE_DEFAULT       = 90,
        CURLOPT_SSLKEY                  = 10087,
        CURLOPT_SSLKEYPASSWD            = 10026,
        CURLOPT_SSLKEYTYPE              = 10088,
        CURLOPT_SSLVERSION              = 32,
        CURLOPT_SSL_CIPHER_LIST         = 10083,
        CURLOPT_SSL_CTX_DATA            = 10109,
        CURLOPT_SSL_CTX_FUNCTION        = 20108,
        CURLOPT_SSL_VERIFYHOST          = 81,
        CURLOPT_SSL_VERIFYPEER          = 64,
        CURLOPT_STDERR                  = 10037,
        CURLOPT_TCP_NODELAY             = 121,
        CURLOPT_TELNETOPTIONS           = 10070,
        CURLOPT_TIMECONDITION           = 33,
        CURLOPT_TIMEOUT                 = 13,
        CURLOPT_TIMEVALUE               = 34,
        CURLOPT_TRANSFERTEXT            = 53,
        CURLOPT_UNRESTRICTED_AUTH       = 105,
        CURLOPT_UPLOAD                  = 46,
        CURLOPT_URL                     = 10002,
        CURLOPT_USERAGENT               = 10018,
        CURLOPT_USERPWD                 = 10005,
        CURLOPT_VERBOSE                 = 41,
        CURLOPT_WRITEDATA               = 10001,
        CURLOPT_WRITEFUNCTION           = 20011,
        CURLOPT_WRITEINFO               = 10040,
    } CURLoption;

    typedef [v1_enum] enum CURL_IPRESOLVE
    {
        CURL_IPRESOLVE_WHATEVER = 0,
        CURL_IPRESOLVE_V4       = 1,
        CURL_IPRESOLVE_V6       = 2
    } CURL_IPRESOLVE;

    typedef [v1_enum] enum CURL_HTTP_VERSION
    {
        CURL_HTTP_VERSION_NONE  = 0,
        CURL_HTTP_VERSION_1_0   = 1,
        CURL_HTTP_VERSION_1_1   = 2,
        CURL_HTTP_VERSION_LAST  = 3
    } CURL_HTTP_VERSION;

    typedef [v1_enum] enum CURL_NETRC_OPTION
    {
        CURL_NETRC_IGNORED  = 0,
        CURL_NETRC_OPTIONAL = 1,
        CURL_NETRC_REQUIRED = 2,
        CURL_NETRC_LAST     = 3
    } CURL_NETRC_OPTION;

    typedef [v1_enum] enum CURL_SSLVERSION
    {
        CURL_SSLVERSION_DEFAULT = 0,
        CURL_SSLVERSION_TLSv1   = 1,
        CURL_SSLVERSION_SSLv2   = 2,
        CURL_SSLVERSION_SSLv3   = 3,
        CURL_SSLVERSION_LAST    = 4
    } CURL_SSLVERSION;

    typedef [v1_enum] enum curl_TimeCond
    {
        CURL_TIMECOND_NONE          = 0,
        CURL_TIMECOND_IFMODSINCE    = 1,
        CURL_TIMECOND_IFUNMODSINCE  = 2,
        CURL_TIMECOND_LASTMOD       = 3,
        CURL_TIMECOND_LAST          = 4
    } curl_TimeCond;

    typedef [v1_enum] enum CURLFORMcode {
        CURL_FORMADD_OK             = 0,
        CURL_FORMADD_MEMORY         = 1,
        CURL_FORMADD_OPTION_TWICE   = 2,
        CURL_FORMADD_NULL           = 3,
        CURL_FORMADD_UNKNOWN_OPTION = 4,
        CURL_FORMADD_INCOMPLETE     = 5,
        CURL_FORMADD_ILLEGAL_ARRAY  = 6,
        CURL_FORMADD_DISABLED       = 7,
        CURL_FORMADD_LAST           = 8
    } CURLFORMcode;

    typedef [v1_enum] enum CURLformoption {
        CURLFORM_ARRAY            = 8,
        CURLFORM_BUFFER           = 11,
        CURLFORM_BUFFERLENGTH     = 13,
        CURLFORM_BUFFERPTR        = 12,
        CURLFORM_CONTENTHEADER    = 15,
        CURLFORM_CONTENTSLENGTH   = 6,
        CURLFORM_CONTENTTYPE      = 14,
        CURLFORM_COPYCONTENTS     = 4,
        CURLFORM_COPYNAME         = 1,
        CURLFORM_END              = 17,
        CURLFORM_FILE             = 10,
        CURLFORM_FILECONTENT      = 7,
        CURLFORM_FILENAME         = 16,
        CURLFORM_NAMELENGTH       = 3,
        CURLFORM_NOTHING          = 0,
        CURLFORM_OBSOLETE         = 9,
        CURLFORM_OBSOLETE2        = 18,
        CURLFORM_PTRCONTENTS      = 5,
        CURLFORM_PTRNAME          = 2
    } CURLformoption;

    typedef [v1_enum] enum CURLINFO
    {
        CURLINFO_CONNECT_TIME             = 0x300005,
        CURLINFO_CONTENT_LENGTH_DOWNLOAD  = 0x30000F,
        CURLINFO_CONTENT_LENGTH_UPLOAD    = 0x300010,
        CURLINFO_CONTENT_TYPE             = 0x100012,
        CURLINFO_EFFECTIVE_URL            = 0x100001,
        CURLINFO_FILETIME                 = 0x20000E,
        CURLINFO_HEADER_SIZE              = 0x20000B,
        CURLINFO_HTTPAUTH_AVAIL           = 0x200017,
        CURLINFO_HTTP_CONNECTCODE         = 0x200016,
        CURLINFO_LASTONE                  = 0x1C,
        CURLINFO_NAMELOOKUP_TIME          = 0x300004,
        CURLINFO_NONE                     = 0x0,
        CURLINFO_NUM_CONNECTS             = 0x20001A,
        CURLINFO_OS_ERRNO                 = 0x200019,
        CURLINFO_PRETRANSFER_TIME         = 0x300006,
        CURLINFO_PRIVATE                  = 0x100015,
        CURLINFO_PROXYAUTH_AVAIL          = 0x200018,
        CURLINFO_REDIRECT_COUNT           = 0x200014,
        CURLINFO_REDIRECT_TIME            = 0x300013,
        CURLINFO_REQUEST_SIZE             = 0x20000C,
        CURLINFO_RESPONSE_CODE            = 0x200002,
        CURLINFO_SIZE_DOWNLOAD            = 0x300008,
        CURLINFO_SIZE_UPLOAD              = 0x300007,
        CURLINFO_SPEED_DOWNLOAD           = 0x300009,
        CURLINFO_SPEED_UPLOAD             = 0x30000A,
        CURLINFO_SSL_ENGINES              = 0x40001B,
        CURLINFO_SSL_VERIFYRESULT         = 0x20000D,
        CURLINFO_STARTTRANSFER_TIME       = 0x300011,
        CURLINFO_TOTAL_TIME               = 0x300003,
    } CURLINFO;

    typedef [v1_enum] enum curl_closepolicy
    {
        CURLCLOSEPOLICY_NONE                = 0,
        CURLCLOSEPOLICY_OLDEST              = 1,
        CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 2,
        CURLCLOSEPOLICY_LEAST_TRAFFIC       = 3,
        CURLCLOSEPOLICY_SLOWEST             = 4,
        CURLCLOSEPOLICY_CALLBACK            = 5,
        CURLCLOSEPOLICY_LAST                = 6
    } curl_closepolicy;

    typedef [v1_enum] enum curl_init_flag
    {
        CURL_GLOBAL_NOTHING    = 0,
        CURL_GLOBAL_SSL        = 1,
        CURL_GLOBAL_WIN32      = 2,
        CURL_GLOBAL_ALL        = 3,
        CURL_GLOBAL_DEFAULT    = CURL_GLOBAL_ALL
    } curl_init_flag;

    typedef [v1_enum] enum curl_lock_data
    {
        CURL_LOCK_DATA_NONE         = 0,
        CURL_LOCK_DATA_SHARE        = 1,
        CURL_LOCK_DATA_COOKIE       = 2,
        CURL_LOCK_DATA_DNS          = 3,
        CURL_LOCK_DATA_SSL_SESSION  = 4,
        CURL_LOCK_DATA_CONNECT      = 5,
        CURL_LOCK_DATA_LAST         = 6
    } curl_lock_data;

    typedef [v1_enum] enum curl_lock_access
    {
        CURL_LOCK_ACCESS_NONE   = 0,
        CURL_LOCK_ACCESS_SHARED = 1,
        CURL_LOCK_ACCESS_SINGLE = 2,
        CURL_LOCK_ACCESS_LAST   = 3
    } curl_lock_access;

    typedef [v1_enum] enum CURLSHcode
    {
        CURLSHE_OK          = 0,
        CURLSHE_BAD_OPTION  = 1,
        CURLSHE_IN_USE      = 2,
        CURLSHE_INVALID     = 3,
        CURLSHE_NOMEM       = 4,
        CURLSHE_LAST        = 5
    } CURLSHcode;

    typedef [v1_enum] enum CURLSHoption
    {
        CURLSHOPT_NONE          = 0,
        CURLSHOPT_SHARE         = 1,
        CURLSHOPT_UNSHARE       = 2,
        CURLSHOPT_LOCKFUNC      = 3,
        CURLSHOPT_UNLOCKFUNC    = 4,
        CURLSHOPT_USERDATA      = 5,
        CURLSHOPT_LAST          = 6
    } CURLSHoption;

    typedef [v1_enum] enum CURLversion {
        CURLVERSION_FIRST   = 0,
        CURLVERSION_SECOND  = 1,
        CURLVERSION_THIRD   = 2,
        CURLVERSION_NOW     = CURLVERSION_THIRD
    } CURLversion;

    typedef [v1_enum] enum CURLversionFeatureBitmask
    {
        CURL_VERSION_IPV6         = 0x01,
        CURL_VERSION_KERBEROS4    = 0x02,
        CURL_VERSION_SSL          = 0x04,
        CURL_VERSION_LIBZ         = 0x08,
        CURL_VERSION_NTLM         = 0x10,
        CURL_VERSION_GSSNEGOTIATE = 0x20,
        CURL_VERSION_DEBUG        = 0x40,
        CURL_VERSION_ASYNCHDNS    = 0x80,
        CURL_VERSION_SPNEGO       = 0x100,
        CURL_VERSION_LARGEFILE    = 0x200,
        CURL_VERSION_IDN          = 0x400,
    } CURLversionFeatureBitmask;

    typedef [v1_enum] enum CURLMSG
    {
        CURLMSG_NONE = 0,
        CURLMSG_DONE = 1,
        CURLMSG_LAST = 2
    } CURLMSG;

    typedef [v1_enum] enum CURLMcode
    {
        CURLM_CALL_MULTI_PERFORM  = -1,
        CURLM_OK                  = 0,
        CURLM_BAD_HANDLE          = 1,
        CURLM_BAD_EASY_HANDLE     = 2,
        CURLM_OUT_OF_MEMORY       = 3,
        CURLM_INTERNAL_ERROR      = 4,
        CURLM_LAST                = 5
    } CURLMcode;

	[dllname("vblibcurl.dll")]
	module ExportedFunctions {
		[entry("vbcurl_easy_cleanup"), helpstring("Cleanup an easy session")]
		void __stdcall vbcurl_easy_cleanup([in]long easy);
        [entry("vbcurl_easy_duphandle"), helpstring("Duplicate an easy handle")]
        long __stdcall vbcurl_easy_duphandle([in]long easy);
        [entry("vbcurl_easy_getinfo"), helpstring("Get information on an easy session")]
        CURLcode __stdcall vbcurl_easy_getinfo([in]long easy, [in]CURLINFO info,
            [in]VARIANT* pv);
		[entry("vbcurl_easy_init"), helpstring("Initialize an easy session")]
		long __stdcall vbcurl_easy_init();
		[entry("vbcurl_easy_perform"), helpstring("Perform an easy transfer")]
		CURLcode __stdcall vbcurl_easy_perform([in]long easy);
        [entry("vbcurl_easy_reset"), helpstring("Reset an easy handle")]
        void __stdcall vbcurl_easy_reset([in]long easy);
		[entry("vbcurl_easy_setopt"), helpstring("Set option for easy transfer")]
		CURLcode __stdcall vbcurl_easy_setopt([in]long easy,
            [in]CURLoption opt, [in]VARIANT* value);
        [entry("vbcurl_easy_strerror"), helpstring("Get a string description of an error code")]
        BSTR __stdcall vbcurl_easy_strerror([in]CURLcode err);

        [entry("vbcurl_form_add_four_to_part"),
            helpstring("Add two option/value pairs to a form part")]
        CURLFORMcode __stdcall vbcurl_form_add_four_to_part([in]long part,
            [in]CURLformoption opt1, [in]VARIANT* val1,
            [in]CURLformoption opt2, [in]VARIANT* val2);
        [entry("vbcurl_form_add_pair_to_part"),
            helpstring("Add an option/value pair to a form part")]
        CURLFORMcode __stdcall vbcurl_form_add_pair_to_part([in]long part,
            [in]CURLformoption opt, [in]VARIANT* val);
        [entry("vbcurl_form_add_part"),
            helpstring("Add a completed part to a multi-part form")]
        CURLFORMcode __stdcall vbcurl_form_add_part([in]long form, [in]long part);
        [entry("vbcurl_form_add_six_to_part"),
            helpstring("Add three option/value pairs to a form part")]
        CURLFORMcode __stdcall vbcurl_form_add_six_to_part([in]long part,
            [in]CURLformoption opt1, [in]VARIANT* val1,
            [in]CURLformoption opt2, [in]VARIANT* val2,
            [in]CURLformoption opt3, [in]VARIANT* val3);
        [entry("vbcurl_form_create"), helpstring("Create a multi-part form handle")]
        long __stdcall vbcurl_form_create();
        [entry("vbcurl_form_create_part"), helpstring("Create a multi-part form-part")]
        long __stdcall vbcurl_form_create_part([in]long form);
        [entry("vbcurl_form_free"), helpstring("Free a form and all its parts")]
        void __stdcall vbcurl_form_free([in]long form);

        [entry("vbcurl_multi_add_handle"), helpstring("Add an easy handle")]
        CURLMcode __stdcall vbcurl_multi_add_handle([in]long multi, [in]long easy);
        [entry("vbcurl_multi_cleanup"), helpstring("Cleanup a multi handle")]
        CURLMcode __stdcall vbcurl_multi_cleanup([in]long multi);
        [entry("vbcurl_multi_fdset"), helpstring("Call fdset on internal sockets")]
        CURLMcode __stdcall vbcurl_multi_fdset([in]long multi);
        [entry("vbcurl_multi_info_read"), helpstring("Read per-easy info for a multi handle")]
        long __stdcall vbcurl_multi_info_read([in]long multi, [in,out]CURLMSG* msg,
            [in,out]long* easy, [in,out]CURLcode* code);
        [entry("vbcurl_multi_init"), helpstring("Initialize a multi handle")]
        long __stdcall vbcurl_multi_init();
        [entry("vbcurl_multi_perform"), helpstring("Read/write the easy handles")]
        CURLMcode __stdcall vbcurl_multi_perform([in]long multi, [in, out]long* runningHandles);
        [entry("vbcurl_multi_remove_handle"), helpstring("Remove an easy handle")]
        CURLMcode __stdcall vbcurl_multi_remove_handle([in]long multi, [in]long easy);
        [entry("vbcurl_multi_select"), helpstring("Perform select on easy handles")]
        long __stdcall vbcurl_multi_select([in]long multi, [in]long timeoutMillis);
        [entry("vbcurl_multi_strerror"), helpstring("Get a string description of an error code")]
        BSTR __stdcall vbcurl_multi_strerror([in]CURLMcode err);

        [entry("vbcurl_slist_append"), helpstring("Append a string to an slist")]
        void __stdcall vbcurl_slist_append([in]long slist, [in]BSTR str);
        [entry("vbcurl_slist_create"), helpstring("Create a string list")]
        long __stdcall vbcurl_slist_create();
        [entry("vbcurl_slist_free"), helpstring("Free a created string list")]
        void __stdcall vbcurl_slist_free([in]long slist);

        [entry("vbcurl_string_escape"), helpstring("Escape an URL")]
        BSTR __stdcall vbcurl_string_escape([in]BSTR url, [in]long len);
        [entry("vbcurl_string_unescape"), helpstring("Unescape an URL")]
        BSTR __stdcall vbcurl_string_unescape([in]BSTR url, [in]long len);
        [entry("vbcurl_string_version"), helpstring("Get the underlying libcurl version string")]
        BSTR __stdcall vbcurl_string_version();

        [entry("vbcurl_version_age"), helpstring("Age of libcurl version")]
        long __stdcall vbcurl_version_age([in]long ver);
        [entry("vbcurl_version_ares"), helpstring("ARES version string")]
        BSTR __stdcall vbcurl_version_ares([in]long ver);
        [entry("vbcurl_version_ares_num"), helpstring("ARES version number")]
        long __stdcall vbcurl_version_ares_num([in]long ver);
        [entry("vbcurl_version_features"), helpstring("Bitmask of supported features")]
        long __stdcall vbcurl_version_features([in]long ver);
        [entry("vbcurl_version_host"), helpstring("Info of host on which libcurl was built")]
        BSTR __stdcall vbcurl_version_host([in]long ver);
        [entry("vbcurl_version_info"), helpstring("Get libcurl version info")]
        long __stdcall vbcurl_version_info([in]CURLversion age);
        [entry("vbcurl_version_libidn"), helpstring("Get libidn version, if present")]
        BSTR __stdcall vbcurl_version_libidn([in]long ver);
        [entry("vbcurl_version_libz"), helpstring("Get libz version, if present")]
        BSTR __stdcall vbcurl_version_libz([in]long ver);
        [entry("vbcurl_version_num"), helpstring("Get numeric version number")]
        long __stdcall vbcurl_version_num([in]long ver);
        [entry("vbcurl_version_protocols"), helpstring("Get supported protocols")]
        void __stdcall vbcurl_version_protocols([in]long ver,
            [out]SAFEARRAY(BSTR)*ppsa);
        [entry("vbcurl_version_ssl"), helpstring("Get SSL version string")]
        BSTR __stdcall vbcurl_version_ssl([in]long ver);
        [entry("vbcurl_version_ssl_num"), helpstring("Get SSL version number")]
        long __stdcall vbcurl_version_ssl_num([in]long ver);
        [entry("vbcurl_version_string"), helpstring("Get version string")]
        BSTR __stdcall vbcurl_version_string([in]long ver);
	}
}

